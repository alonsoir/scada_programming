# üöÄ AEROSPACE SCADA SYSTEM - Makefile
# Comandos para gesti√≥n f√°cil del sistema SCADA

.PHONY: help install start start-dev start-simple stop clean test status

# Variables
PYTHON := python3
VENV := scada_env
PIP := $(VENV)/bin/pip
PYTHON_VENV := $(VENV)/bin/python

# Comando por defecto
help: ## üìö Mostrar ayuda
	@echo "üöÄ AEROSPACE SCADA SYSTEM"
	@echo "=========================="
	@echo ""
	@echo "Comandos disponibles:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "üéØ Inicio r√°pido:"
	@echo "  make install    # Configurar entorno"
	@echo "  make start      # Lanzar sistema completo"
	@echo ""

install: ## üõ†Ô∏è Instalar entorno y dependencias
	@echo "üõ†Ô∏è Configurando entorno SCADA..."
	$(PYTHON) -m venv $(VENV)
	$(PIP) install --upgrade pip
	$(PIP) install -r requirements.txt
	@echo "‚úÖ Entorno configurado correctamente"
	@echo "üí° Usa 'make start' para lanzar el sistema"

start: ## üöÄ Lanzar sistema completo (recomendado)
	@echo "üöÄ Lanzando Sistema SCADA completo..."
	$(PYTHON_VENV) launch_scada.py

start-dev: ## üîß Lanzar en modo desarrollo (terminales separadas)
	@echo "üîß Lanzando en modo desarrollo..."
	$(PYTHON_VENV) dev_start.py

start-simple: ## ‚ö° Lanzamiento simple (sin navegador autom√°tico)
	@echo "‚ö° Lanzamiento simple..."
	$(PYTHON_VENV) launch_scada.py --no-browser

start-debug: ## üêõ Lanzar con logs detallados
	@echo "üêõ Lanzando con debug..."
	$(PYTHON_VENV) launch_scada.py --debug

plc-only: ## üîß Solo PLC Virtual
	@echo "üîß Iniciando solo PLC Virtual..."
	$(PYTHON_VENV) core/simulation/virtual_plc.py

hmi-only: ## üåê Solo HMI Web
	@echo "üåê Iniciando solo HMI Web..."
	$(PYTHON_VENV) run_hmi.py

monitor: ## üìä Monitor de consola
	@echo "üìä Iniciando monitor..."
	$(PYTHON_VENV) test_connection.py

test: ## üß™ Ejecutar tests
	@echo "üß™ Ejecutando tests..."
	$(PYTHON_VENV) tests/minimal_test.py
	$(PYTHON_VENV) tests/simple_test.py
	@echo "‚úÖ Tests completados"

stop: ## üõë Detener todos los procesos SCADA
	@echo "üõë Deteniendo procesos SCADA..."
	@pkill -f "virtual_plc.py" 2>/dev/null || true
	@pkill -f "run_hmi.py" 2>/dev/null || true
	@pkill -f "launch_scada.py" 2>/dev/null || true
	@echo "‚úÖ Procesos detenidos"

status: ## üìä Estado del sistema
	@echo "üìä Estado del Sistema SCADA:"
	@echo "=========================="
	@echo "üîß PLC Virtual:"
	@pgrep -f "virtual_plc.py" >/dev/null && echo "   ‚úÖ Ejecut√°ndose" || echo "   ‚ùå Detenido"
	@echo "üåê HMI Web:"
	@pgrep -f "run_hmi.py" >/dev/null && echo "   ‚úÖ Ejecut√°ndose" || echo "   ‚ùå Detenido"
	@echo ""
	@echo "üåê URLs:"
	@echo "   HMI Web: http://127.0.0.1:8050"
	@echo "   PLC Modbus: 127.0.0.1:5020"

clean: ## üßπ Limpiar archivos temporales
	@echo "üßπ Limpiando archivos temporales..."
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	rm -rf .pytest_cache 2>/dev/null || true
	rm -f /tmp/scada_*.log 2>/dev/null || true
	rm -rf logs/*.log 2>/dev/null || true
	@echo "‚úÖ Limpieza completada"

clean-all: clean ## üóëÔ∏è Limpiar todo incluyendo entorno virtual
	@echo "üóëÔ∏è Eliminando entorno virtual..."
	rm -rf $(VENV)
	@echo "‚úÖ Limpieza completa terminada"

upgrade: ## ‚¨ÜÔ∏è Actualizar dependencias
	@echo "‚¨ÜÔ∏è Actualizando dependencias..."
	$(PIP) install --upgrade -r requirements.txt
	@echo "‚úÖ Dependencias actualizadas"

info: ## ‚ÑπÔ∏è Informaci√≥n del sistema
	@echo "‚ÑπÔ∏è Informaci√≥n del Sistema SCADA:"
	@echo "================================"
	@echo "üêç Python: $(shell $(PYTHON) --version)"
	@echo "üìÅ Directorio: $(shell pwd)"
	@echo "üèóÔ∏è Entorno virtual: $(VENV)"
	@echo "üì¶ Dependencias:"
	@$(PYTHON_VENV) -c "import pymodbus; print(f'   pymodbus: {pymodbus.__version__}')" 2>/dev/null || echo "   pymodbus: No instalado"
	@$(PYTHON_VENV) -c "import dash; print(f'   dash: {dash.__version__}')" 2>/dev/null || echo "   dash: No instalado"
	@$(PYTHON_VENV) -c "import plotly; print(f'   plotly: {plotly.__version__}')" 2>/dev/null || echo "   plotly: No instalado"

# Configuraciones especiales
.ONESHELL:
.SHELLFLAGS := -e -c

# Verificar que el entorno virtual existe para comandos que lo necesitan
$(PYTHON_VENV):
	@echo "‚ùå Error: Entorno virtual no encontrado"
	@echo "üí° Ejecuta: make install"
	@exit 1